#OOPS
 class bikes:
    def__init__(self,name,cc,m,cost):
      self.name=name
      self.cc=cc
      self.m=m
      self.cost=cost
    def performance(self):
        print("abt bikes:",self.name,self.cc,self.m,self.cost)
gt=bikes("GT",650,12,4)
duke=bikes("duke",390,302)
gt.performance()
class variablle
class cars:
    wheels=4
    def _init_(self,mil,car):
        self.mil=mil
        self.car=car
    def get_mil(self):
        return c1.mil
    def set_mil(self):
        c1.mil=12
        return c1.mil
    @staticmethod
    def inf0():
        print("hi hello")
    @classmethod
    def infor(cls):
        return cls.wheels
print(cars.infor())
c1=cars(10,"BMW")
c2=cars(15,"audi")
c1.wheels=9
print(c1.mil)
print(c1.wheels)
print(c2.wheels)
print(c1.get_mil())
print(c1.set_mil())
print(c1.mil)

class pycharm:
    def execute(self):
        print("compling")
        print("running")
class myeditor:
    def execute(self):
        print("debugging")
        print("printing error")
        print("compling")
        print("running")
class laptop:
    def code(self,ide):
        ide.execute()
ide=pycharm()
lap1=laptop()
lap1.code(ide)


class student:
    def __init__(self,m1,m2):
        self.m1=m1
        self.m2=m2
    def __add__(self,other):
        m1=self.m1+other.m1
        m2=self.m2+other.m2
        s3=student(m1,m2)
        return s3
    def __gt__(self,other):
        r1=self.m1+self.m2
        r2=other.m1+other.m2
        if r1>r2:
            return True
        else:
            return False
s1=student(59,65)
s2=student(67,85)
s3=s1+s2
print(s3.m1)
print(s3.m2)
if s1>s2:
    print("s1 is having more marks then s2")
else:
    print("s2 is having more then s1")

class math:
    def add(self,a=0,b=0,c=0):
        return a+b+c
m=math
print(m.add(1,2))
print(m.add(1,2,3))
print(m.add())
single level inheritance
class Animal:
    def sound(self):
        return "Animals make different sounds"
class Dog(Animal):
    def s(self):
        return "dog barks"
d=Dog()
print(d.sound())
print(d.s())

class engine:
    def engine_info(self):
        return "this is an engine"
class wheels:
    def wheels_info(self):
        return "car has 4 wheels"
class car (engine,wheels):
    def car_info(self):
        return "this a car"
c=car()
print(c.engine_info())
print(c.wheels_info())
print(c.car_info())

hybrid inheritance
class A:
    def display(self):
        print("display from A class")
class B(A):
    def display(self):
        print("display from B class")
class C:
    def show(self):
        print("hi from C class")
class D(B,C):
    def display(self):
        print("display from D class")
d1=D()
d1.display()
d1.show()
print(D.mro())
LINEAR SEARCH
def search(list1,key):
    for  i in range(len(list1)):
        if key==list[i]:
          print("key found at index:",i)
          break
        else: 
          print("key not  found")
list1=[2,4,5,6,7,8,9,11]
key=int(input("enter the key:"))
search(list1,key)
#binary search
nums=[1,3,5,7,9]
target=5
low,high=0 ,len(nums)-1
result=-1
while low<=high:
    mid=(low+high)
    if nums[mid]==target:
        result=mid
        break
    elif nums[mid]<target:
        low=mid+1
    else:
        high=mid-1
print(result)

def binary_search(arr,key,low,high):
    if low<=high:
        mid=(low+high)//2
        if (arr[mid])==key:
            if arr[mid-1]==key:
                return binary_search(arr,key,mid+1,high)
            else:
                return mid
        elif arr[mid]<key:
            return binary_search(arr,key,mid+1,high)
        elif arr[mid]>key:
            return binary_search(arr,key,low,mid-1)
    else:
        return -1
arr=[1,2,3,3,4,5,6,7]
key=3
res=binary_search(arr,key,0,len(arr))
print(res)
roated sorted array
nums=[4,5,6,7,1,2]
low,high=0,len(nums)-1
while low<high:
    mid=(low+high)//2
    if nums[mid]>nums[high]:
      low=mid+1
else:
    high=mid
    print(nums[low])

nums=[1,2,3,1]
low,high=0,len(nums)-1
while low<high:
    mid=(low+high)//2
    if nums[mid]<nums[mid+1]
      low=mid+1
    else:
       high=mid
       print(low)
