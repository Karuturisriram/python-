nums=[1,2,3,4,5,6,7,8,9]
evens=list(filter(lambda n:n%2==0,nums))
doubles=list(map(lambda n:n*2,evens))
print(doubles)
##
from functools import reduce
nums=[1,2,3,4,5,6,7,8,9]
evens=list(filter(lambda n:n%2==0,nums))
doubles=list(map(lambda n:n*2,evens))
num=reduce(lambda a,b:a+b,doubles)
print(doubles)
print(nums)

def reversed(n):
    rev=0
    while n!=0:
        d=n%10
        rev=rev*10+d
        n=n//10
    print(rev)
rev=int(input())
reversed(rev)

def nums(n):
    if n==0:
        return
    print(n,end="")
    nums(n-1)
    if n!=1:
        print(n,end=" ")
n=int(input())
nums(n)

find factorial of a number using recursion:
def fact(n):
    if n==0 or n==1:
        return 1
    else:
      return n*fact(n-1)
n=int(input())
print(fact(n))

reverse a number
def rev_num(n,rev=0):
    if n==0:
        return rev
    return rev_num(n//10,rev*10+n%10)
num=int(input())
print(rev_num(num))
    
check weather given number is palindrome or not
def is_palindrome(n,rev=0,temp=None):
    if temp is None:
        temp=n
    if n==0:
        return temp==rev
    return is_palindrome(n//10,rev*10+n%10,temp)
num=int(input())
print(is_palindrome(num))

check weather given number is perfect square or not
def is_perfectsquare(n):
    if n<0:
        return False
    i=1
    while i*i<n:
        if i*i==n:
            return True
        i+=1
    return False
a=int(input())
print(is_perfectsquare(a))

check given input is power of two or not
def is_power_of_two(n):
    if n <= 0:
        return False
    return (n & (n - 1)) == 0
a=int(input())
print(is_power_of_two(a))

find power of two number if a,b find a power b
def  power(a,b):
    return a**b
a=int(input())
b=int(input())
print(power(a,b))
